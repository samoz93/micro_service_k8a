# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  front-end:
    build:
      context: ./
      target: runner
      dockerfile: ./Dockerfile_fe
    container_name: 3d_gallery_FE
    ports:
      - 80:3000
      - 443:3000
      - 3000:3000
    restart: always
    networks:
      - my_network

  # api:
  #   container_name: api
  #   build:
  #     context: ./api
  #     target: production
  #   volumes:
  #     - ./api:/usr/src/app
  #     - ./api/node_modules:/usr/src/app/node_modules
  #   ports:
  #     - 3001:3000
  #   # command: npm run start:dev
  #   env_file:
  #     - ./frontend/.env
  #   networks:
  #     - my_network
  #   depends_on:
  #     - redis
  #     - mongo

  # redis:
  #   container_name: redis
  #   image: redis:5
  #   networks:
  #     - my_network

  # mongo:
  #   container_name: mongo
  #   image: mongo
  #   restart: always
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${DB_USERNAME}
  #     MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD}
  #   ports:
  #     - 27017:27017
  #   volumes:
  #     - mongo_vol:/data/db
  #   networks:
  #     - my_network

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

networks:
  my_network:
    external: true
volumes:
  mongo_vol:
